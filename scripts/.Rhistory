plotMDS(logCPM_no_batch, col=mycolors[test], top = 1000)
plotMDS(logCPM, col=mycolors[test], top = 1000)
# PCA:
pca <- prcomp(t(logCPM))
df_pca <- as.data.frame(pca$x)
theme<-theme(panel.background = element_blank(),panel.border=element_rect(fill=NA),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
strip.background=element_blank(),
axis.text=element_text(colour="black", size=12),axis.ticks=element_line(colour="black"),
axis.title=element_text(colour="black", size=13),
plot.margin=unit(c(1,1,1,1),"line"),legend.position = "none")
percentage <- round(pca$sdev / sum(pca$sdev) * 100, 2)
percentage <- paste( colnames(df_pca), "(", paste( as.character(percentage), "%", ")", sep="") )
df_pca$group <-test
rownames(df)
plotnames <- gsub("PNA_21", "PNA", rownames(y$samples))
plotnames <- gsub("_", "-", plotnames)
plotnames <- gsub("-([12])", "-R\\1", plotnames)
plotnames <- gsub("JVPep112", "KFF", plotnames)
p<-ggplot(df_pca,aes(x=PC1,y=PC2,group=group,label=plotnames, colour=group))
p<-p+geom_point(size=3)+ scale_shape_identity()+
geom_text_repel(size=4, min.segment.length = 0, seed = 42, box.padding = 0.5, max.overlaps = 20)+
theme + xlab(percentage[1]) + ylab(percentage[2])+ scale_color_manual(values = mycolors)
p
# save pca as svg
svg("../analysis/PCA.svg")
print(p)
dev.off()
df_pca$group
# make a contrast:
con <- makeContrasts(RNA_MOE = RNA_MOE - Control,
RNA_F = RNA_F - Control,
LNA = LNA - Control,
RNA_Ome = RNA_Ome - Control,
DNA_PTO = DNA_PTO - Control,
PMO = PMO - Control,
PNA_21 = PNA_21 - Control,
# PNA22 = PNA22 - Control,
#PNA15 = PNA15 - Control,
#PNA14 = PNA14 - Control,
JVPep112 = JVPep112 - Control,
KFFN3 = KFFN3 - Control,
levels = design)
fit <- glmQLFit(y, design, robust = TRUE)
res <- list(    RNA_MOE = glmQLFTest(fit, contrast = con[,1]),
RNA_F = glmQLFTest(fit, contrast = con[,2]),
LNA = glmQLFTest(fit, contrast = con[,3]),
RNA_Ome = glmQLFTest(fit, contrast = con[,4]),
DNA_PTO = glmQLFTest(fit, contrast = con[,5]),
PMO = glmQLFTest(fit, contrast = con[,6]),
PNA_21 = glmQLFTest(fit, contrast = con[,7]),
#  PNA22 = glmQLFTest(fit, contrast = con[,8]),
#   PNA15 = glmQLFTest(fit, contrast = con[,9]),
#   PNA14 = glmQLFTest(fit, contrast = con[,10]),
JVPep112 = glmQLFTest(fit, contrast = con[,8]),
KFFN3 = glmQLFTest(fit, contrast = con[,9]))
res$RNA_MOE
plotMD(y, main = "MD-plot")
abline(h=0, col="red", lty=2, lwd=2)
plotBCV(y)
plotQLDisp(fit)
do_volcano <- function(restab, targetgene = NULL, pointsize = 2, x_limit = F,y_limit=F, show_sig = F, alpha=0.05,
minlogfc=1, title = "Volcano", off_target_list = NULL, phopq = NULL) {
cols = c("targets"="darkorange","0 mm"="cyan", "1 mm"="blue","2 mm"="darkblue", "PhoPQ"="darkred")
rownames(restab) <- gsub("^([^A-Z].+)" , "italic('\\1')" , rownames(restab))
g_labels <- gsub("^([^A-Z].+)" , "italic('\\1')" , targetgene)
g = ggplot(restab) +
geom_point(
data = restab,
aes(x = logFC, y = -log10(FDR)),
color = "darkgrey",
cex = pointsize
) + theme_bw()+ # change theme to standard black&wite.
geom_hline(yintercept = -log10(alpha),
color = "black", linetype = 3) +
geom_vline(xintercept = c(-minlogfc,minlogfc),
color = "black", linetype = 3) +
theme(axis.title.x = element_text(size=20),
axis.title.y = element_text(size=20),
axis.text = element_text(size=15, colour = "black"),
panel.background = element_rect(colour = "black"),
axis.line = element_line(colour = "black"),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x =  element_blank(),#element_line(colour="lightgrey", size=0.3),
panel.grid.major.y = element_blank(),#element_line(colour="lightgrey", size=0.3),
plot.title = element_text(hjust = 0.5, size = 23),
legend.position = "none")+
ggtitle(title)+
xlab(expression("log"[2]*" fold change")) +
ylab(expression("- log"[10]*" P-value (FDR)"))+
scale_x_continuous(expand = c(0,0),breaks = seq(-20,20,2), limits = c(-x_limit,x_limit)) +
scale_y_continuous(expand = c(0, 0),breaks = seq(0,26,2), limits = c(0,y_limit))
if (!is.null(phopq)) {
g <- g + geom_point(
data = restab[restab$genes %in% phopq,],
aes(x = logFC, y = -log10(FDR), bg = "PhoPQ"),
cex = pointsize, pch=21)
}
if (is.null(off_target_list)) {
g <- g +
geom_point(
data = restab[restab$FDR<alpha & restab$logFC < -minlogfc,],
aes(x = logFC, y = -log10(FDR)),
color = "steelblue",
cex = pointsize) +
geom_point(
data = restab[restab$FDR<alpha & restab$logFC > minlogfc,],
aes(x = logFC, y = -log10(FDR)),
color = "darkred",
cex = pointsize)
} else{
# different colors for different mismatches:
mm321 <- restab[gsub("^([^A-Z].+)" , "italic('\\1')" , unique(unlist(off_target_list[3]))),]
mm321 <- mm321[mm321$logFC < -1 & mm321$FDR < 0.001,]
g <- g +
geom_point(
data = restab[gsub("^([^A-Z].+)" , "italic('\\1')" , unlist(off_target_list[3])),],
aes(x = logFC, y = -log10(FDR), color = "2 mm"),
cex = pointsize) +
geom_point(
data = restab[gsub("^([^A-Z].+)" , "italic('\\1')" , unlist(off_target_list[2])),],
aes(x = logFC, y = -log10(FDR), color = "1 mm"),
cex = pointsize)  +
#zero mismatches:
if (length(off_target_list[[1]]) > 0) {
geom_point(
data = restab[gsub("^([^A-Z].+)" , "italic('\\1')" , unlist(off_target_list[1])),],
aes(x = logFC, y = -log10(FDR), color = "0 mm"),
cex = pointsize)
}
g_labels <- c(g_labels, gsub("^([^A-Z].+)" , "italic('\\1')" , unlist(off_target_list[1])))
g_labels <- c(g_labels, rownames(mm321))
g_labels <- g_labels[!grepl("NA", g_labels)]
}
# show the sign. genes:
# show the sigficantest genes:
if(show_sig){
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
top_up <- restab[ which(restab$FDR < alpha & restab$logFC > minlogfc),]
top_down <- restab[ which(restab$FDR < alpha & restab$logFC < -(minlogfc)),]
if (length(rownames(top_up)) > 0 && (length(rownames(top_up)) > 3)){
logFC.scaled <- range01(top_up$logFC)
FDR.scaled <- range01(-log(top_up$FDR))
summ <- (logFC.scaled + FDR.scaled)
top_up <- top_up[order(-summ),][1:3,]
}
if (length(rownames(top_down))>0 && (length(rownames(top_down))> 3)){
logFC.scaled <- range01(-top_down$logFC)
FDR.scaled <- range01(-log(top_down$FDR))
summ <- (logFC.scaled + FDR.scaled)
top_down <- top_down[order(-summ),][1:3,]
}
top_peaks <- rbind(top_up, top_down)
top_peaks <- na.omit(top_peaks)
g_labels <- c(g_labels, rownames(top_peaks))
}
g <- g + geom_point(
data = restab[gsub("^([^A-Z].+)" , "italic('\\1')" , targetgene),],
aes(x = logFC, y = -log10(FDR), color = "targets"),
cex = pointsize+1)
# add labels:
g_labels <- unique(g_labels)
g <- g + geom_label_repel(
data = restab[g_labels,] , aes(x = logFC, y = -log10(FDR), label = gsub("-","_",rownames(restab[g_labels,]))),
hjust = 0.1,
size = 4, segment.alpha = 0.5,
segment.color = "black",
min.segment.length=unit(0, "cm"), parse = T) + scale_fill_manual(values=cols) + scale_color_manual(values=cols)
g
}
targetgene = c("acpP","fabF")
title=resname
targetgene = c("acpP","fabF")
title="abc"
x_limit = 5
show_sig = T
y_limit = 23
alpha=0.001
pointsize = 3
off_target_list = off_targets
# I get the links between locus tags and gene names:
pnames <- read.delim("../data/link_lt_gn.tab", header = F)
rownames(pnames) <- pnames$V2
# I also import PhoPQ related genes:
ppq_raw <- read.delim("../data/PHOPQ.tsv", header = T)
ppq <- as.character(ppq_raw$PhoPQ[ppq_raw$PhoPQ != ""])
phopqvolc <- c(pnames[pnames$V1 %in% ppq,]$V2, "PinT", "SL1344_1169", "SL1344_1168")
prefname <- ifelse(phopqvolc %in% pnames$V2 ,pnames[phopqvolc,]$V1, "" )
prefname <- ifelse(isUnique(prefname), prefname, "")
phopqvolc <- ifelse(prefname != "", prefname, phopqvolc)
phopqvolc <- c(phopqvolc, "phoP", "phoQ")
list_ot_0 <- list()
list_ot_1 <- list()
list_ot_2 <- list()
l_volcanoplots <- list()
for (resname in names(res)){
# adjust p-values FDR
res[[resname]]$table$FDR <- p.adjust(res[[resname]]$table$PValue, method = "fdr")
restab <- res[[resname]]$table
restab$locus_tag <- rownames(restab)
targetgene <-  "acpP"
#add genenames (not locustags)
prefname <- ifelse(rownames(restab) %in% pnames$V2 ,pnames[rownames(restab),]$V1, "" )
prefname <- ifelse(isUnique(prefname), prefname, "")
rownames(restab) <- ifelse(prefname != "", prefname, rownames(restab))
restab$genes <- rownames(restab)
hist(restab$PValue, breaks=100, main=resname)
# make volcanos:
svg(paste0("../analysis/volcanoplots/",resname, ".svg"))
print(do_volcano(restab, targetgene = c("acpP","fabF"), title=resname,
x_limit = 9, show_sig = T,
y_limit = 10,
alpha=0.001, pointsize = 2))
dev.off()
pdf(paste0("../analysis/volcanoplots/",resname, ".pdf"))
print(do_volcano(restab, targetgene = c("acpP","fabF"), title=resname,
x_limit = 9, show_sig = T,
y_limit = 10,
alpha=0.001, pointsize = 3))
dev.off()
#save result_table:
dataname <- paste("../analysis/diff_exp_rawdata/", resname, ".csv", sep = "")
write.csv(restab[order(restab$FDR),], dataname)
#pval distributions:
hist(restab$PValue, breaks=100, main=resname)
l_volcanoplots[[resname]] <- do_volcano(restab, targetgene = c("acpP","fabF"), title=resname,
x_limit = 9, show_sig = T,
y_limit = 10,
alpha=0.001, pointsize = 3)
}
library(cowplot)
library(gridExtra)
n <- length(l_volcanoplots)
nCol <- 2
pdf("../analysis/volcanoes.pdf", height = 18, width = 16)
grid.arrange(l_volcanoplots$RNA_MOE, l_volcanoplots$RNA_F, l_volcanoplots$LNA, l_volcanoplots$RNA_Ome, l_volcanoplots$DNA_PTO, l_volcanoplots$PMO, l_volcanoplots$PNA_21, l_volcanoplots$JVPep112, l_volcanoplots$KFFN3, ncol = 3)
dev.off()
reg_genes  <- as_tibble(t(sapply(res, function(x) {
upreg <- nrow(x$table[x$table$FDR<0.001&x$table$logFC>1,])
downreg <- nrow(x$table[x$table$FDR<0.001&x$table$logFC<(-1),])
tot <- upreg + downreg
c(upreg, downreg, tot)
})))
names(reg_genes) <- c("upregulated", "downregulated", "total_regulated")
reg_genes$sample <- names(res)
writexl::write_xlsx(reg_genes, path = "../analysis/analysis_cd_2023_02/nrs_up_down_genes.xlsx", col_names = T)
res
names(res)
targetgene = c("acpP","fabF")
title=resname
x_limit = 5
show_sig = T
y_limit = 23
alpha=0.001
pointsize = 3
off_target_list = off_targets
res$RNA_MOE$table
res$RNA_MOE$table["SL1344_1133",]
mutants_logchange <- sapply(res, function(x) x$table["SL1344_1133",]$logFC)
mutants_pvals <- sapply(res, function(x) x$table["SL1344_1133",]$FDR)
mutants_logchange
acpp_logchange <- sapply(res, function(x) x$table[c("SL1344_1133", "SL1344_1134"),]$logFC)
acpp_logchange
acpp_fabF_pvals <- t(sapply(res, function(x) x$table[c("SL1344_1133", "SL1344_1134"),]$FDR))
acpp_fabF_pvals
acpp_fabF_pvals <- tibble(t(sapply(res, function(x) x$table[c("SL1344_1133", "SL1344_1134"),]$FDR)))
acpp_fabF_pvals
acpp_fabF_pvals <- t(sapply(res, function(x) x$table[c("SL1344_1133", "SL1344_1134"),]$FDR))
acpp_fabF_logchange <- t(sapply(res, function(x) x$table[c("SL1344_1133", "SL1344_1134"),]$logFC))
acpp_fabF_pvals <- t(sapply(res, function(x) x$table[c("SL1344_1133", "SL1344_1134"),]$FDR))
acpp_fabF_logchange
colnames(acpp_fabF_logchange) <- c("acpP", "fabF")
colnames(acpp_fabF_pvals) <- c("acpP", "fabF")
acpp_fabF_logchange$moiety <- rownames(acpp_fabF_logchange)
acpp_fabF_pvals$moiety <- rownames(acpp_fabF_pvals)
rownames(acpp_fabF_logchange)
acpp_fabF_logchange
acpp_fabF_logchange <- t(sapply(res, function(x) x$table[c("SL1344_1133", "SL1344_1134"),]$logFC))
acpp_fabF_pvals <- t(sapply(res, function(x) x$table[c("SL1344_1133", "SL1344_1134"),]$FDR))
colnames(acpp_fabF_logchange) <- c("acpP", "fabF")
colnames(acpp_fabF_pvals) <- c("acpP", "fabF")
acpp_fabF_logchange
acpp_fabF_pvals
acpp_fabF_logchange$moiety <- rownames(acpp_fabF_logchange)
acpp_fabF_logchange <- as.fdata.frame(t(sapply(res, function(x) x$table[c("SL1344_1133", "SL1344_1134"),]$logFC)))
acpp_fabF_logchange <- as.data.frame(t(sapply(res, function(x) x$table[c("SL1344_1133", "SL1344_1134"),]$logFC)))
acpp_fabF_logchange
acpp_fabF_pvals <- as.data.frame(t(sapply(res, function(x) x$table[c("SL1344_1133", "SL1344_1134"),]$FDR)))
colnames(acpp_fabF_logchange) <- c("acpP", "fabF")
colnames(acpp_fabF_pvals) <- c("acpP", "fabF")
acpp_fabF_logchange$moiety <- rownames(acpp_fabF_logchange)
acpp_fabF_pvals$moiety <- rownames(acpp_fabF_pvals)
acpp_fabF_pvals
acpp_fabF_logchange %>% pivot_longer(1:2)
acpp_fabF_logchange %>% pivot_longer(1:2, names_to = "gene")
acpp_fabF_logchange %>% pivot_longer(1:2, names_to = "gene", values_to = "log2FC")
acpp_fabF_logchange <- acpp_fabF_logchange %>% pivot_longer(1:2, names_to = "gene", values_to = "log2FC")
acpp_fabF_pvals <- acpp_fabF_pvals %>% pivot_longer(1:2, names_to = "gene", values_to = "log2FC")
acpp_fabF_logchange
names(acpp_fabF_logchange)
g_mismatches_acpp_fabf <- acpp_fabF_logchange %>% ggplot(aes(x=moiety, y=-log2FC, fill=gene)) +
geom_bar(stat='identity', width = 0.8, position = "dodge", color="black") +
geom_text(stat = "identity" , aes(label=sign), vjust=-0.3,hjust=0.3 , size=5,position = position_dodge(width=.8))+
theme_classic() + ylab("log2 fold downregulation") +
theme(axis.text.x = element_text(angle = 45, hjust = 1,vjust=1, size = 9),
axis.text.y = element_text(size=10),
axis.title = element_text(size=14),
title = element_text(size=15),
legend.title = element_text(size=12),
legend.text = element_text(face="italic", size = 12))+
scale_y_continuous(limits = c(-0.1,2.5)) + xlab("") +
geom_hline(yintercept=0, color="black") + scale_fill_manual(values=c('steelblue','lightblue'))+
ggtitle(label = expression(paste("Effect of 2-bp mismatch PNAs on ",italic("acpP"), " and ", italic("fabF"), " expression")))
g_mismatches_acpp_fabf
acpp_fabF_logchange %>% ggplot(aes(x=moiety, y=-log2FC, fill=gene)) +
geom_bar(stat='identity', width = 0.8, position = "dodge", color="black")
acpp_fabF_pvals <- acpp_fabF_pvals %>% pivot_longer(1:2, names_to = "gene", values_to = "pval")
acpp_fabF_logchange <- as.data.frame(t(sapply(res, function(x) x$table[c("SL1344_1133", "SL1344_1134"),]$logFC)))
acpp_fabF_pvals <- as.data.frame(t(sapply(res, function(x) x$table[c("SL1344_1133", "SL1344_1134"),]$FDR)))
colnames(acpp_fabF_logchange) <- c("acpP", "fabF")
colnames(acpp_fabF_pvals) <- c("acpP", "fabF")
acpp_fabF_logchange$moiety <- rownames(acpp_fabF_logchange)
acpp_fabF_pvals$moiety <- rownames(acpp_fabF_pvals)
acpp_fabF_logchange <- acpp_fabF_logchange %>% pivot_longer(1:2, names_to = "gene", values_to = "log2FC")
acpp_fabF_pvals <- acpp_fabF_pvals %>% pivot_longer(1:2, names_to = "gene", values_to = "pval")
acpp_fabF_logchange$sign <- ifelse(acpp_fabF_pvals$pval < 0.01, "*", " ")
acpp_fabF_logchange
acpp_fabF_logchange$sign <- ifelse(acpp_fabF_pvals$pval < 0.01, "*", "")
g_mismatches_acpp_fabf <- acpp_fabF_logchange %>% ggplot(aes(x=moiety, y=-log2FC, fill=gene)) +
geom_bar(stat='identity', width = 0.8, position = "dodge", color="black") +
geom_text(stat = "identity" , aes(label=sign), vjust=-0.3,hjust=0.3 , size=5,position = position_dodge(width=.8))+
theme_classic() + ylab("log2 fold downregulation") +
theme(axis.text.x = element_text(angle = 45, hjust = 1,vjust=1, size = 9),
axis.text.y = element_text(size=10),
axis.title = element_text(size=14),
title = element_text(size=15),
legend.title = element_text(size=12),
legend.text = element_text(face="italic", size = 12))+
scale_y_continuous(limits = c(-0.1,2.5)) + xlab("") +
geom_hline(yintercept=0, color="black") + scale_fill_manual(values=c('steelblue','lightblue'))+
ggtitle(label = expression(paste("Effect of 2-bp mismatch PNAs on ",italic("acpP"), " and ", italic("fabF"), " expression")))
g_mismatches_acpp_fabf
acpp_fabF_logchange$sign <- ifelse(acpp_fabF_pvals$pval < 0.01 & abs(acpp_fabF_logchange$log2FC)>1, "*", "")
g_mismatches_acpp_fabf <- acpp_fabF_logchange %>% ggplot(aes(x=moiety, y=-log2FC, fill=gene)) +
geom_bar(stat='identity', width = 0.8, position = "dodge", color="black") +
geom_text(stat = "identity" , aes(label=sign), vjust=-0.3,hjust=0.3 , size=5,position = position_dodge(width=.8))+
theme_classic() + ylab("log2 fold downregulation") +
theme(axis.text.x = element_text(angle = 45, hjust = 1,vjust=1, size = 9),
axis.text.y = element_text(size=10),
axis.title = element_text(size=14),
title = element_text(size=15),
legend.title = element_text(size=12),
legend.text = element_text(face="italic", size = 12))+
scale_y_continuous(limits = c(-0.1,2.5)) + xlab("") +
geom_hline(yintercept=0, color="black") + scale_fill_manual(values=c('steelblue','lightblue'))+
ggtitle(label = expression(paste("Effect of 2-bp mismatch PNAs on ",italic("acpP"), " and ", italic("fabF"), " expression")))
g_mismatches_acpp_fabf
g_mismatches_acpp_fabf <- acpp_fabF_logchange %>% ggplot(aes(x=moiety, y=-log2FC, fill=gene)) +
geom_bar(stat='identity', width = 0.8, position = "dodge", color="black") +
geom_text(stat = "identity" , aes(label=sign), vjust=-0.3,hjust=0.3 , size=5,position = position_dodge(width=.8))+
theme_classic() + ylab("log2 fold downregulation") +
theme(axis.text.x = element_text(angle = 45, hjust = 1,vjust=1, size = 9),
axis.text.y = element_text(size=10),
axis.title = element_text(size=14),
title = element_text(size=15),
legend.title = element_text(size=12),
legend.text = element_text(face="italic", size = 12))+
scale_y_continuous(limits = c(-0.1,2.5)) + xlab("") +
geom_hline(yintercept=0, color="black") +
geom_hline(yintercept=1, color="black") +
scale_fill_manual(values=c('steelblue','lightblue'))+
ggtitle(label = expression(paste("Effect of 2-bp mismatch PNAs on ",italic("acpP"), " and ", italic("fabF"), " expression")))
g_mismatches_acpp_fabf
g_mismatches_acpp_fabf <- acpp_fabF_logchange %>% ggplot(aes(x=moiety, y=-log2FC, fill=gene)) +
geom_hline(yintercept=1, color="black") +
geom_bar(stat='identity', width = 0.8, position = "dodge", color="black") +
geom_text(stat = "identity" , aes(label=sign), vjust=-0.3,hjust=0.3 , size=5,position = position_dodge(width=.8))+
theme_classic() + ylab("log2 fold downregulation") +
theme(axis.text.x = element_text(angle = 45, hjust = 1,vjust=1, size = 9),
axis.text.y = element_text(size=10),
axis.title = element_text(size=14),
title = element_text(size=15),
legend.title = element_text(size=12),
legend.text = element_text(face="italic", size = 12))+
scale_y_continuous(limits = c(-0.1,2.5)) + xlab("") +
geom_hline(yintercept=0, color="black") +
scale_fill_manual(values=c('steelblue','lightblue'))+
ggtitle(label = expression(paste("Effect of 2-bp mismatch PNAs on ",italic("acpP"), " and ", italic("fabF"), " expression")))
g_mismatches_acpp_fabf
g_mismatches_acpp_fabf <- acpp_fabF_logchange %>% ggplot(aes(x=moiety, y=-log2FC, fill=gene)) +
geom_hline(yintercept=1, color="grey", linetype = "dotted") +
geom_bar(stat='identity', width = 0.8, position = "dodge", color="black") +
geom_text(stat = "identity" , aes(label=sign), vjust=-0.3,hjust=0.3 , size=5,position = position_dodge(width=.8))+
theme_classic() + ylab("log2 fold downregulation") +
theme(axis.text.x = element_text(angle = 45, hjust = 1,vjust=1, size = 9),
axis.text.y = element_text(size=10),
axis.title = element_text(size=14),
title = element_text(size=15),
legend.title = element_text(size=12),
legend.text = element_text(face="italic", size = 12))+
scale_y_continuous(limits = c(-0.1,2.5)) + xlab("") +
geom_hline(yintercept=0, color="black") +
scale_fill_manual(values=c('steelblue','lightblue'))+
ggtitle(label = expression(paste("Effect of 2-bp mismatch PNAs on ",italic("acpP"), " and ", italic("fabF"), " expression")))
g_mismatches_acpp_fabf
g_mismatches_acpp_fabf <- acpp_fabF_logchange %>% ggplot(aes(x=moiety, y=-log2FC, fill=gene)) +
geom_hline(yintercept=1, color="black", linetype = "dotted") +
geom_bar(stat='identity', width = 0.8, position = "dodge", color="black") +
geom_text(stat = "identity" , aes(label=sign), vjust=-0.3,hjust=0.3 , size=5,position = position_dodge(width=.8))+
theme_classic() + ylab("log2 fold downregulation") +
theme(axis.text.x = element_text(angle = 45, hjust = 1,vjust=1, size = 9),
axis.text.y = element_text(size=10),
axis.title = element_text(size=14),
title = element_text(size=15),
legend.title = element_text(size=12),
legend.text = element_text(face="italic", size = 12))+
scale_y_continuous(limits = c(-0.1,2.5)) + xlab("") +
geom_hline(yintercept=0, color="black") +
scale_fill_manual(values=c('steelblue','lightblue'))+
ggtitle(label = expression(paste("Effect of 2-bp mismatch PNAs on ",italic("acpP"), " and ", italic("fabF"), " expression")))
g_mismatches_acpp_fabf
g_mismatches_acpp_fabf <- acpp_fabF_logchange %>% ggplot(aes(x=moiety, y=-log2FC, fill=gene)) +
geom_hline(yintercept=1, color="black", linetype = "dotted") +
geom_bar(stat='identity', width = 0.8, position = "dodge", color="black") +
geom_text(stat = "identity" , aes(label=sign), vjust=-0.3,hjust=0.3 , size=5,position = position_dodge(width=.8))+
theme_classic() + ylab(expression(log[2]~fold~downregulation)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1,vjust=1, size = 9),
axis.text.y = element_text(size=10),
axis.title = element_text(size=14),
title = element_text(size=15),
legend.title = element_text(size=12),
legend.text = element_text(face="italic", size = 12))+
scale_y_continuous(limits = c(-0.1,2.5)) + xlab("") +
geom_hline(yintercept=0, color="black") +
scale_fill_manual(values=c('steelblue','lightblue'))+
ggtitle(label = expression(paste("Effect of 2-bp mismatch PNAs on ",italic("acpP"), " and ", italic("fabF"), " expression")))
g_mismatches_acpp_fabf
acpp_fabF_logchange$moiety
as.factor(acpp_fabF_logchange$moiety)
factor(acpp_fabF_logchange$moiety)
factor(acpp_fabF_logchange$moiety, levels = unique(acpp_fabF_logchange$moiety))
acpp_fabF_logchange$moiety <- factor(acpp_fabF_logchange$moiety, levels = unique(acpp_fabF_logchange$moiety))
g_mismatches_acpp_fabf <- acpp_fabF_logchange %>% ggplot(aes(x=moiety, y=-log2FC, fill=gene)) +
geom_hline(yintercept=1, color="black", linetype = "dotted") +
geom_bar(stat='identity', width = 0.8, position = "dodge", color="black") +
geom_text(stat = "identity" , aes(label=sign), vjust=-0.3,hjust=0.3 , size=5,position = position_dodge(width=.8))+
theme_classic() + ylab(expression(log[2]~fold~downregulation)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1,vjust=1, size = 9),
axis.text.y = element_text(size=10),
axis.title = element_text(size=14),
title = element_text(size=15),
legend.title = element_text(size=12),
legend.text = element_text(face="italic", size = 12))+
scale_y_continuous(limits = c(-0.1,2.5)) + xlab("") +
geom_hline(yintercept=0, color="black") +
scale_fill_manual(values=c('steelblue','lightblue'))+
ggtitle(label = expression(paste("Effect of 2-bp mismatch PNAs on ",italic("acpP"), " and ", italic("fabF"), " expression")))
g_mismatches_acpp_fabf
g_mismatches_acpp_fabf <- acpp_fabF_logchange %>% ggplot(aes(x=moiety, y=-log2FC, fill=gene)) +
geom_hline(yintercept=1, color="black", linetype = "dotted") +
geom_bar(stat='identity', width = 0.8, position = "dodge", color="black") +
geom_text(stat = "identity" , aes(label=sign), vjust=-0.3,hjust=0.3 , size=5,position = position_dodge(width=.8))+
theme_classic() + ylab(expression(log[2]~fold~downregulation)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1,vjust=1, size = 9),
axis.text.y = element_text(size=10),
axis.title = element_text(size=14),
title = element_text(size=15),
legend.title = element_text(size=12),
legend.text = element_text(face="italic", size = 12))+
scale_y_continuous(limits = c(-0.1,2.5)) + xlab("") +
geom_hline(yintercept=0, color="black") +
scale_fill_manual(values=c('steelblue','lightblue'))
g_mismatches_acpp_fabf
g_mismatches_acpp_fabf <- acpp_fabF_logchange %>% ggplot(aes(x=moiety, y=-log2FC, fill=gene)) +
geom_hline(yintercept=1, color="black", linetype = "dotted") +
geom_bar(stat='identity', width = 0.8, position = "dodge", color="black") +
geom_text(stat = "identity" , aes(label=sign), vjust=-0.3,hjust=0.3 , size=5,position = position_dodge(width=.8))+
theme_classic() + ylab(expression(log[2]~fold~gene~depletion)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1,vjust=1, size = 9),
axis.text.y = element_text(size=10),
axis.title = element_text(size=14),
title = element_text(size=15),
legend.title = element_text(size=12),
legend.text = element_text(face="italic", size = 12))+
scale_y_continuous(limits = c(-0.1,2.5)) + xlab("") +
geom_hline(yintercept=0, color="black") +
scale_fill_manual(values=c('steelblue','lightblue'))
g_mismatches_acpp_fabf
pdf("../analysis/depletion_target_transcripts.pdf")
draw(g_mismatches_acpp_fabf)
pdf("../analysis/depletion_target_transcripts.pdf")
print(g_mismatches_acpp_fabf)
dev.off()
pdf("../analysis/depletion_target_transcripts.pdf", height=7)
print(g_mismatches_acpp_fabf)
dev.off()
pdf("../analysis/depletion_target_transcripts.pdf", height=5)
print(g_mismatches_acpp_fabf)
dev.off()
pdf("../analysis/depletion_target_transcripts.svg", height=5)
print(g_mismatches_acpp_fabf)
dev.off()
pdf("../analysis/depletion_target_transcripts.svg", height=5)
draw(g_mismatches_acpp_fabf)
pdf("../analysis/depletion_target_transcripts.svg", height=5)
g_mismatches_acpp_fabf
dev.off()
svg("../analysis/depletion_target_transcripts.svg", height=5)
print(g_mismatches_acpp_fabf)
dev.off()
g_mismatches_acpp_fabf
